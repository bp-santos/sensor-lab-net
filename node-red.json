[
  {
    "id": "c3cbf231de665554",
    "type": "tab",
    "label": "Dashboard",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "aa5e6b6b8eb33ca0",
    "type": "group",
    "z": "c3cbf231de665554",
    "name": "Sensor Node 01",
    "style": {
      "label": true
    },
    "nodes": [
      "c8d10c48d1c7779c",
      "9ede17af4febdbf3",
      "62e442946b0a523c",
      "1e460769578da2a7",
      "51e7c219d08ca6be",
      "4d3d630ae6bc750a"
    ],
    "x": 314,
    "y": 59,
    "w": 372,
    "h": 222
  },
  {
    "id": "06badfa7a9ad63f9",
    "type": "group",
    "z": "c3cbf231de665554",
    "name": "Network Status",
    "style": {
      "label": true
    },
    "nodes": ["27c1abf43ac1d0c1", "3797f22e62926862", "5d63e9d1ac9184a4"],
    "x": 314,
    "y": 299,
    "w": 312,
    "h": 122
  },
  {
    "id": "9ede17af4febdbf3",
    "type": "function",
    "z": "c3cbf231de665554",
    "g": "aa5e6b6b8eb33ca0",
    "name": "Temperature",
    "func": "const data = JSON.parse(msg.payload);\nmsg.payload = data.Temp;\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 410,
    "y": 120,
    "wires": [["c8d10c48d1c7779c", "51e7c219d08ca6be"]]
  },
  {
    "id": "1e460769578da2a7",
    "type": "function",
    "z": "c3cbf231de665554",
    "g": "aa5e6b6b8eb33ca0",
    "name": "Light",
    "func": "const data = JSON.parse(msg.payload);\nmsg.payload = data.Light;\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 390,
    "y": 220,
    "wires": [["62e442946b0a523c", "4d3d630ae6bc750a"]]
  },
  {
    "id": "27c1abf43ac1d0c1",
    "type": "function",
    "z": "c3cbf231de665554",
    "g": "06badfa7a9ad63f9",
    "name": "Nodes",
    "func": "function getParent(node) {\n  return \"0\" + node.slice(-1 * (node.length - 2));\n}\n\nfunction addNode(node) {\n  if (node.id.length == 2) {\n    tree.children.push({ name: node.name, id: node.id, children: [] });\n  }\n\n  if (node.id.length == 3) { //011\n    const level1 = tree.children.find(child => child.id == getParent(node.id)); // encontra 01\n    level1.children.push({ name: node.name, id: node.id, children: [] }); // cria 011\n  }\n\n  if (node.id.length == 4) { // 0111\n    let level1 = tree.children.find(child => child.id == getParent(getParent(node.id))); // encontra 01\n    let level2 = level1.children.find(child => child.id == getParent(node.id)); // econtra 011\n    level2.children.push({ name: node.name, id: node.id, children: [] }); // adiciona 0111\n  }\n\n  if (node.id.length == 5) { // 01111\n    let level1 = tree.children.find(child => child.id == getParent(getParent(getParent(node.id)))); // encontra 01\n    let level2 = level1.children.find(child => child.id == getParent(getParent(node.id))); // encontra 011\n    let level3 = level2.children.find(child => child.id == getParent(node.id)); // encontra 0111\n    level3.children.push({ name: node.name, id: node.id, children: [] }); // adiciona 01111\n  }\n}\n\nfunction removeEmptyChildren(node) {\n  if (node.children.length === 0) {\n    delete node.children;\n  } else {\n    node.children.forEach(removeEmptyChildren);\n  }\n}\n\nconst data = JSON.parse(msg.payload);\nlet tree = { name: \"Main Node\", id: \"00\", children: [] };\n\ndata.Nodes.forEach(addNode);\nremoveEmptyChildren(tree);\nmsg.payload = tree;\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 390,
    "y": 340,
    "wires": [["5d63e9d1ac9184a4"]]
  },
  {
    "id": "3797f22e62926862",
    "type": "ui_media",
    "z": "c3cbf231de665554",
    "d": true,
    "g": "06badfa7a9ad63f9",
    "group": "57c95d82f8b6e821",
    "name": "",
    "width": 0,
    "height": 0,
    "order": 5,
    "category": "thesis",
    "file": "nrf24l010.png",
    "layout": "adjust",
    "showcontrols": false,
    "loop": true,
    "onstart": false,
    "scope": "local",
    "tooltip": "",
    "x": 530,
    "y": 380,
    "wires": [[]]
  },
  {
    "id": "51e7c219d08ca6be",
    "type": "ui_gauge",
    "z": "c3cbf231de665554",
    "g": "aa5e6b6b8eb33ca0",
    "name": "",
    "group": "57c95d82f8b6e821",
    "order": 1,
    "width": 4,
    "height": 5,
    "gtype": "gage",
    "title": "Temperature",
    "label": "ÂºC",
    "format": "{{msg.payload}}",
    "min": "-40",
    "max": "125",
    "colors": ["#00b500", "#e6e600", "#ca3838"],
    "seg1": "",
    "seg2": "",
    "diff": false,
    "className": "",
    "x": 590,
    "y": 100,
    "wires": []
  },
  {
    "id": "4d3d630ae6bc750a",
    "type": "ui_gauge",
    "z": "c3cbf231de665554",
    "g": "aa5e6b6b8eb33ca0",
    "name": "",
    "group": "57c95d82f8b6e821",
    "order": 2,
    "width": 4,
    "height": 5,
    "gtype": "gage",
    "title": "Light",
    "label": "units",
    "format": "{{msg.payload}}",
    "min": 0,
    "max": "1024",
    "colors": ["#00b500", "#e6e600", "#ca3838"],
    "seg1": "",
    "seg2": "",
    "diff": false,
    "className": "",
    "x": 530,
    "y": 240,
    "wires": []
  },
  {
    "id": "c8d10c48d1c7779c",
    "type": "ui_chart",
    "z": "c3cbf231de665554",
    "g": "aa5e6b6b8eb33ca0",
    "name": "",
    "group": "57c95d82f8b6e821",
    "order": 3,
    "width": 4,
    "height": 5,
    "label": "",
    "chartType": "line",
    "legend": "false",
    "xformat": "HH:mm:ss",
    "interpolate": "linear",
    "nodata": "",
    "dot": false,
    "ymin": "0",
    "ymax": "100",
    "removeOlder": "60",
    "removeOlderPoints": "",
    "removeOlderUnit": "60",
    "cutout": 0,
    "useOneColor": false,
    "useUTC": false,
    "colors": [
      "#1f77b4",
      "#aec7e8",
      "#ff7f0e",
      "#2ca02c",
      "#98df8a",
      "#d62728",
      "#ff9896",
      "#9467bd",
      "#c5b0d5"
    ],
    "outputs": 1,
    "useDifferentColor": false,
    "className": "",
    "x": 570,
    "y": 140,
    "wires": [[]]
  },
  {
    "id": "62e442946b0a523c",
    "type": "ui_chart",
    "z": "c3cbf231de665554",
    "g": "aa5e6b6b8eb33ca0",
    "name": "",
    "group": "57c95d82f8b6e821",
    "order": 4,
    "width": 4,
    "height": 5,
    "label": "",
    "chartType": "line",
    "legend": "false",
    "xformat": "HH:mm:ss",
    "interpolate": "linear",
    "nodata": "",
    "dot": false,
    "ymin": "0",
    "ymax": "1024",
    "removeOlder": "60",
    "removeOlderPoints": "",
    "removeOlderUnit": "60",
    "cutout": 0,
    "useOneColor": false,
    "useUTC": false,
    "colors": [
      "#1f77b4",
      "#aec7e8",
      "#ff7f0e",
      "#2ca02c",
      "#98df8a",
      "#d62728",
      "#ff9896",
      "#9467bd",
      "#c5b0d5"
    ],
    "outputs": 1,
    "useDifferentColor": false,
    "className": "",
    "x": 530,
    "y": 200,
    "wires": [[]]
  },
  {
    "id": "5d63e9d1ac9184a4",
    "type": "ui_template",
    "z": "c3cbf231de665554",
    "g": "06badfa7a9ad63f9",
    "group": "e5922190928d13c3",
    "name": "",
    "order": 1,
    "width": 18,
    "height": 10,
    "format": "<style>\n  .node {\n    cursor: pointer;\n  }\n\n  .node circle {\n    fill: #BFBFBF;\n    stroke: #BFBFBF;\n    stroke-width: 3px;\n  }\n\n  .node text {\n    font: 14px sans-serif;\n  }\n\n  .link {\n    fill: none;\n    stroke: #BFBFBF;\n    stroke-width: 3px;\n  }\n</style>\n\n<div id=\"chart\"></div>\n\n<script>\n  var margin = { top: 0, right: 120, bottom: 0, left: 120 };\n  var width = 960 - margin.right - margin.left;\n  var height = 500 - margin.top - margin.bottom;\n\n  var i = 0,\n      duration = 750,\n      root,\n      dataJson;\n\n  var tree = d3.layout.tree()\n      .size([height, width]);\n\n  var diagonal = d3.svg.diagonal()\n      .projection(function(d) { return [d.y, d.x]; });\n\n  var svg = d3.select(\"#chart\").append(\"svg\")\n      .attr(\"width\", width + margin.right + margin.left)\n      .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n  // Function to update the chart\n  function updateChart(data) {\n    root = data;\n    root.x0 = height / 2;\n    root.y0 = 0;\n\n    function collapse(d) {\n      if (d.children && d.id.length > 2) {\n        d._children = d.children;\n        d._children.forEach(collapse);\n        d.children = null;\n      }\n      if (d.children && d.id.length < 3){\n        d.children.forEach(collapse);\n      }\n    }\n    \n    root.children.forEach(collapse);\n    update(root);\n  }\n\n  function update(source) {\n    // Compute the new tree layout\n    var nodes = tree.nodes(root).reverse();\n    var links = tree.links(nodes);\n\n    // Normalize for fixed-depth\n    nodes.forEach(function(d) { d.y = d.depth * 180; });\n\n    // Update each node\n    var node = svg.selectAll(\"g.node\")\n        .data(nodes, function(d) { return d.id || (d.id = ++i); });\n\n    var nodeEnter = node.enter().append(\"g\")\n        .attr(\"class\", \"node\")\n        .attr(\"transform\", function(d) { return \"translate(\" + source.y0 + \",\" + source.x0 + \")\"; })\n        .on(\"click\", click);\n\n    nodeEnter.append(\"circle\")\n        .attr(\"r\", 1e-6)\n        .style(\"stroke\", function(d) { return d._children ? \"#0094CE\" : \"#BFBFBF\"; });\n\n    nodeEnter.append(\"text\")\n        .attr(\"x\", 0)\n        .attr(\"dy\", \"-2em\")\n        .attr(\"text-anchor\", \"middle\")\n        .text(function(d) { return d.name + \" (\" + d.id + \")\"; })\n        .style(\"fill-opacity\", 1e-6);\n\n    nodeEnter.append(\"image\")\n        .attr(\"xlink:href\", \"/uimedia/thesis/nrf24l010.png\")\n        .attr(\"x\", -17.5)\n        .attr(\"y\", -17.5)\n        .attr(\"width\", 35)\n        .attr(\"height\", 35);\n\n    // Node transitions\n    var nodeUpdate = node.transition()\n        .duration(duration)\n        .attr(\"transform\", function(d) { return \"translate(\" + d.y + \",\" + d.x + \")\"; });\n\n    nodeUpdate.select(\"circle\")\n        .attr(\"r\", 20)\n        .style(\"stroke\", function(d) { return d._children ? \"#0094CE\" : \"#BFBFBF\"; });\n\n    nodeUpdate.select(\"text\")\n        .style(\"fill-opacity\", 1);\n\n    var nodeExit = node.exit().transition()\n        .duration(0)\n        .attr(\"transform\", function(d) { return \"translate(\" + source.y + \",\" + source.x + \")\"; })\n        .remove();\n\n    nodeExit.select(\"circle\")\n        .attr(\"r\", 1e-6);\n\n    nodeExit.select(\"text\")\n        .style(\"fill-opacity\", 1e-6);\n\n    // Link transitions\n    var link = svg.selectAll(\".link\")\n        .data(links, function(d) { return d.target.id; });\n\n    link.enter().insert(\"line\", \"g\")\n        .attr(\"class\", \"link\")\n        .attr(\"x1\", function (d) { return source.y0; })\n        .attr(\"y1\", function (d) { return source.x0; })\n        .attr(\"x2\", function (d) { return source.y0; })\n        .attr(\"y2\", function (d) { return source.x0; });\n\n    link.transition()\n        .duration(duration)\n        .attr(\"x1\", function (d) { return d.source.y; })\n        .attr(\"y1\", function (d) { return d.source.x; })\n        .attr(\"x2\", function (d) { return d.target.y; })\n        .attr(\"y2\", function (d) { return d.target.x; });\n\n    link.exit().transition()\n        .duration(0)\n        .attr(\"x1\", function (d) { return source.y; })\n        .attr(\"y1\", function (d) { return source.x; })\n        .attr(\"x2\", function (d) { return source.y; })\n        .attr(\"y2\", function (d) { return source.x; })\n        .remove();\n\n    nodes.forEach(function(d) {\n      d.x0 = d.x;\n      d.y0 = d.y;\n    });\n  }\n\n  function click(d) {\n    if (d.children) {\n      d._children = d.children;\n      d.children = null;\n    } else {\n      d.children = d._children;\n      d._children = null;\n    }\n    update(d);\n  }\n\n  // When the incoming message changes\n  this.scope.$watch('msg', function(msg) {\n    if (msg) {\n      dataJson = msg.payload;\n      updateChart(dataJson); // Update chart with new data\n    }\n  });\n</script>",
    "storeOutMessages": true,
    "fwdInMessages": true,
    "resendOnRefresh": true,
    "templateScope": "local",
    "className": "",
    "x": 540,
    "y": 340,
    "wires": [[]]
  },
  {
    "id": "a9c29da1d6a570ee",
    "type": "mqtt in",
    "z": "c3cbf231de665554",
    "name": "",
    "topic": "Main Node",
    "qos": "2",
    "datatype": "utf8",
    "broker": "54f63f95cb7e711b",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 200,
    "y": 220,
    "wires": [
      [
        "9ede17af4febdbf3",
        "1e460769578da2a7",
        "27c1abf43ac1d0c1",
        "0304d23a693b4eae"
      ]
    ]
  },
  {
    "id": "0304d23a693b4eae",
    "type": "debug",
    "z": "c3cbf231de665554",
    "name": "debug 1",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 400,
    "y": 460,
    "wires": []
  },
  {
    "id": "57c95d82f8b6e821",
    "type": "ui_group",
    "name": "Sensor Node 01",
    "tab": "8d7d3433d07c904d",
    "order": 1,
    "disp": true,
    "width": "8",
    "collapse": true,
    "className": ""
  },
  {
    "id": "e5922190928d13c3",
    "type": "ui_group",
    "name": "Network Status",
    "tab": "8d7d3433d07c904d",
    "order": 5,
    "disp": true,
    "width": "18",
    "collapse": true,
    "className": ""
  },
  {
    "id": "54f63f95cb7e711b",
    "type": "mqtt-broker",
    "name": "localhost",
    "broker": "localhost",
    "port": "1883",
    "clientid": "",
    "autoConnect": true,
    "usetls": false,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "autoUnsubscribe": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthRetain": "false",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closeRetain": "false",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willRetain": "false",
    "willPayload": "",
    "willMsg": {},
    "userProps": "",
    "sessionExpiry": ""
  },
  {
    "id": "8d7d3433d07c904d",
    "type": "ui_tab",
    "name": "Applications and Computation for the Internet of Things",
    "icon": "dashboard",
    "order": 1,
    "disabled": false,
    "hidden": false
  }
]
